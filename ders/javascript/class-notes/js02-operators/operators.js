//?Bazi hazÄ±r fonksiyonlar
// Math.floor();  //* her zaman en yakin alt tam sayiya yuvarlar
// Math.ceil();  //* her zaman en yakin ust tam sayiya yuvarlar
// Math.trunc(); //* sayinin tam kismini alir.
// Math.round(); //* en yakin tam sayiya yuvarlar.
// Math.random(); //* 0 ve 1 arasÄ±nda rasgele sayi uretir.
// toFixed(basamakSayÄ±sÄ±): // . dan sonra parantezin iÃ§ine verdiÄŸimiz sayÄ± kadar basamak alÄ±r. EÄŸer noktadan sonraki basamak sayÄ±sÄ± iÃ§ine verdiÄŸimiz sayÄ±dan bÃ¼yÃ¼kse sondaki rakamÄ± bir artÄ±rÄ±r.

//! ** (Ã¼s alma) operatÃ¶rÃ¼

// const Ã¼s1 = 2;
// const Ã¼s2 = 3;
// console.log(Ã¼s1 ** Ã¼s2);

// // Dairenin alanÄ±, pi Ã§arpÄ± yarÄ±Ã§apÄ±n karesidir (A = Ï€ rÂ²).

// const pi = 3.14;
// const yariCap = 9;

// const alan = pi * yariCap ** 2;
// console.log(alan);

// //! ðŸ”¥ðŸ”¥ðŸ”¥              ArtÄ±rma ve Eksiltme OperatÃ¶rleri

// //? ++ ve -- operatÃ¶rleri 1 artÄ±rÄ±r veya 1 eksiltir

// // sonrasÄ± artÄ±rma ve eksiltme
// let number1 = 6;
// //  let artirNew = number1 // 6
// //  number1= number1 +1// 7
// let number1New = number1++; // Ã¶nce atadÄ± sonrasÄ±nda number1 deÄŸiÅŸkenini bir number1dÄ±
// console.log(number1New); // 6
// console.log(number1New); // 6
// console.log(number1); // 7
// console.log(number1New);

//! ðŸ”¥ðŸ”¥ðŸ”¥              Atama OperatÃ¶rleri

let nums1 = 14;
let nums2 = 17;
//! += Ekle ve Sonucu Ata
// nums2 = nums2 + nums1;
//? yukarÄ±daki gibi uzun uzun yazmak yerine += operatÃ¶rÃ¼nÃ¼ kullanarak iÅŸlemimi kÄ±saltmÄ±ÅŸ oldum. AynÄ± ÅŸekilde diÄŸer operatÃ¶rler iÃ§inde geÃ§erli.
// nums2 += nums1;
// console.log(nums2); // 31

let num14 = 6;
let num15 = 3;

//! -= Ã‡Ä±kar ve Sonucu Ata
// num14 = num14 - num15;
// num14 -= num15;
// console.log(num14); // -5

//! *= Ã‡arp ve Sonucu Ata
// num14 = num14 * num15;
// num14 *= num15;
// console.log(num14); // 750
//! /= BÃ¶l ve Sonucu Ata
// num14 = num14 / num15;
// num14 /= num15;
// console.log(num14);
//! /= BÃ¶lÃ¼mden KalanÄ± Bul ve Ata
// num14 = num14 % num15;
// num14 %= num15;
// console.log(num14);

//! **= Ãœs Al ve Sonucu Ata
// num14 = num14 ** num15;
// num14 **= num15;
// console.log(num14);

const num16 = 27;

console.log(num16 == 27);
console.log(num16 == "27");

console.log(num16 === 27);
console.log(num16 === "27");

// const user1 = prompt("LÃ¼tfen bir sati giriniz");
// const user2 = prompt("LÃ¼tfen bir sati giriniz");
// console.log(user1);
// console.log(user2);
// const isSame = user1 == user2;
// console.log(isSame);
console.log(true == 1);
console.log(null == undefined);

console.log(true === 1);
console.log(null === undefined);

console.log(15 != "15");
console.log(15 !== "15");

//! ðŸ”¥ðŸ”¥ðŸ”¥              KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri

// const num16 = 27;

// console.log(num16 == 27); //true
// console.log(num16 == "27"); // true
//? == (eÅŸitlik operatÃ¶rÃ¼), iki deÄŸeri karÅŸÄ±laÅŸtÄ±rÄ±rken tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapar. EÄŸer karÅŸÄ±laÅŸtÄ±rÄ±lan deÄŸerler farklÄ± tiplerde ise, JavaScript otomatik olarak bu deÄŸerleri aynÄ± tipe dÃ¶nÃ¼ÅŸtÃ¼rerek karÅŸÄ±laÅŸtÄ±rma yapar. Bu iÅŸlem sÄ±rasÄ±nda, deÄŸerler eÅŸitlenebilir bir forma getirilir ve ardÄ±ndan karÅŸÄ±laÅŸtÄ±rÄ±lÄ±r.

// console.log(num16 === 27); // true
// console.log(num16 === "27"); // false
// //? === operatÃ¶rÃ¼ otomatik tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yapmadÄ±ÄŸÄ±ndan dolayÄ±, farklÄ± tiplerdeki deÄŸerleri eÅŸit olarak kabul etmez.tip ve deÄŸer aynÄ± mÄ± diye sorgular.

// // const user1 = prompt("LÃ¼tfen bir sayÄ± griniz: ");
// // const user2 = prompt("LÃ¼tfen bir sayÄ± griniz: ");
// // console.log(user1);
// // console.log(user2);
// // const isSame = user1 == user2;
// // console.log(isSame);

// console.log(true == 1); //true
// console.log(null == undefined); // true
// // true boolean deÄŸeri 1 sayÄ±sÄ± ile eÅŸit kabul edilir, null ve undefined ise birbirine eÅŸit kabul edilir.
// console.log(true === 1); // false
// console.log(null === undefined); // false

//? !=, !==

// console.log(15 != "15"); // false. Ã§Ã¼nkÃ¼ deÄŸerleri eÅŸit
// console.log(15 !== "15"); // true. Ã§Ã¼nkÃ¼ typelarÄ± eÅŸit deÄŸil

// //? >, < (BÃ¼yÃ¼k mÃ¼?, KÃ¼Ã§Ã¼k mÃ¼?)
// console.log(15 > 5); // true
// console.log(15 < 5); // false

// console.log("15" > 5); // true

// console.log("a" > "b"); // false.String ifadelerde ASCII'ye gore kiyaslama yapilir.
// console.log("a".charCodeAt()); // 97
// console.log("b".charCodeAt()); // 98
// //. .charCodeAt() metodu string karakterin ASCII karÅŸÄ±lÄ±ÄŸÄ±nÄ± verir.
// console.log("a" > "A");// true

//? >=, <= (BÃ¼yÃ¼k veya eÅŸit mi?, KÃ¼Ã§Ã¼k veya eÅŸit mi?)

console.log(15 >= 15); //true
console.log(15 <= 15); // true
console.log(15 >= 16); // false
// console.log(15 >== 16);// error verir. Ã‡Ã¼nkÃ¼ bu ÅŸekilde karÅŸÄ±laÅŸtÄ±rma operatÃ¶rÃ¼ bulunmuyor.
console.log(15 >= "15"); // true
console.log("14" <= "15"); // true
